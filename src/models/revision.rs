/*
 * Drive API
 *
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * The version of the OpenAPI document: v3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Revision : The metadata for a revision to a file.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Revision {
    /// Links for exporting Docs Editors files to specific formats.
    #[serde(rename = "exportLinks", skip_serializing_if = "Option::is_none")]
    pub export_links: Option<::std::collections::HashMap<String, String>>,
    /// The ID of the revision.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Whether to keep this revision forever, even if it is no longer the head revision. If not set, the revision will be automatically purged 30 days after newer content is uploaded. This can be set on a maximum of 200 revisions for a file. This field is only applicable to files with binary content in Drive.
    #[serde(rename = "keepForever", skip_serializing_if = "Option::is_none")]
    pub keep_forever: Option<bool>,
    /// Identifies what kind of resource this is. Value: the fixed string \"drive#revision\".
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(rename = "lastModifyingUser", skip_serializing_if = "Option::is_none")]
    pub last_modifying_user: Option<Box<crate::models::User>>,
    /// The MD5 checksum of the revision's content. This is only applicable to files with binary content in Drive.
    #[serde(rename = "md5Checksum", skip_serializing_if = "Option::is_none")]
    pub md5_checksum: Option<String>,
    /// The MIME type of the revision.
    #[serde(rename = "mimeType", skip_serializing_if = "Option::is_none")]
    pub mime_type: Option<String>,
    /// The last time the revision was modified (RFC 3339 date-time).
    #[serde(rename = "modifiedTime", skip_serializing_if = "Option::is_none")]
    pub modified_time: Option<String>,
    /// The original filename used to create this revision. This is only applicable to files with binary content in Drive.
    #[serde(rename = "originalFilename", skip_serializing_if = "Option::is_none")]
    pub original_filename: Option<String>,
    /// Whether subsequent revisions will be automatically republished. This is only applicable to Docs Editors files.
    #[serde(rename = "publishAuto", skip_serializing_if = "Option::is_none")]
    pub publish_auto: Option<bool>,
    /// Whether this revision is published. This is only applicable to Docs Editors files.
    #[serde(rename = "published", skip_serializing_if = "Option::is_none")]
    pub published: Option<bool>,
    /// A link to the published revision. This is only populated for Google Sites files.
    #[serde(rename = "publishedLink", skip_serializing_if = "Option::is_none")]
    pub published_link: Option<String>,
    /// Whether this revision is published outside the domain. This is only applicable to Docs Editors files.
    #[serde(rename = "publishedOutsideDomain", skip_serializing_if = "Option::is_none")]
    pub published_outside_domain: Option<bool>,
    /// The size of the revision's content in bytes. This is only applicable to files with binary content in Drive.
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
}

impl Revision {
    /// The metadata for a revision to a file.
    pub fn new() -> Revision {
        Revision {
            export_links: None,
            id: None,
            keep_forever: None,
            kind: None,
            last_modifying_user: None,
            md5_checksum: None,
            mime_type: None,
            modified_time: None,
            original_filename: None,
            publish_auto: None,
            published: None,
            published_link: None,
            published_outside_domain: None,
            size: None,
        }
    }
}


