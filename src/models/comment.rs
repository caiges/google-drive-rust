/*
 * Drive API
 *
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * The version of the OpenAPI document: v3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Comment : A comment on a file.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Comment {
    /// A region of the document represented as a JSON string. For details on defining anchor properties, refer to  Add comments and replies.
    #[serde(rename = "anchor", skip_serializing_if = "Option::is_none")]
    pub anchor: Option<String>,
    #[serde(rename = "author", skip_serializing_if = "Option::is_none")]
    pub author: Option<Box<crate::models::User>>,
    /// The plain text content of the comment. This field is used for setting the content, while htmlContent should be displayed.
    #[serde(rename = "content", skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    /// The time at which the comment was created (RFC 3339 date-time).
    #[serde(rename = "createdTime", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    /// Whether the comment has been deleted. A deleted comment has no content.
    #[serde(rename = "deleted", skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    /// The content of the comment with HTML formatting.
    #[serde(rename = "htmlContent", skip_serializing_if = "Option::is_none")]
    pub html_content: Option<String>,
    /// The ID of the comment.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Identifies what kind of resource this is. Value: the fixed string \"drive#comment\".
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// The last time the comment or any of its replies was modified (RFC 3339 date-time).
    #[serde(rename = "modifiedTime", skip_serializing_if = "Option::is_none")]
    pub modified_time: Option<String>,
    #[serde(rename = "quotedFileContent", skip_serializing_if = "Option::is_none")]
    pub quoted_file_content: Option<Box<crate::models::CommentQuotedFileContent>>,
    /// The full list of replies to the comment in chronological order.
    #[serde(rename = "replies", skip_serializing_if = "Option::is_none")]
    pub replies: Option<Vec<crate::models::Reply>>,
    /// Whether the comment has been resolved by one of its replies.
    #[serde(rename = "resolved", skip_serializing_if = "Option::is_none")]
    pub resolved: Option<bool>,
}

impl Comment {
    /// A comment on a file.
    pub fn new() -> Comment {
        Comment {
            anchor: None,
            author: None,
            content: None,
            created_time: None,
            deleted: None,
            html_content: None,
            id: None,
            kind: None,
            modified_time: None,
            quoted_file_content: None,
            replies: None,
            resolved: None,
        }
    }
}


