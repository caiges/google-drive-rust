/*
 * Drive API
 *
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * The version of the OpenAPI document: v3
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`drive_changes_get_start_page_token`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DriveChangesGetStartPageTokenError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`drive_changes_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DriveChangesListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`drive_changes_watch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DriveChangesWatchError {
    UnknownValue(serde_json::Value),
}


/// Gets the starting pageToken for listing future changes.
pub async fn drive_changes_get_start_page_token(configuration: &configuration::Configuration, alt: Option<&str>, fields: Option<&str>, key: Option<&str>, oauth_token: Option<&str>, pretty_print: Option<bool>, quota_user: Option<&str>, user_ip: Option<&str>, drive_id: Option<&str>, supports_all_drives: Option<bool>, supports_team_drives: Option<bool>, team_drive_id: Option<&str>) -> Result<crate::models::StartPageToken, Error<DriveChangesGetStartPageTokenError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/changes/startPageToken", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = alt {
        local_var_req_builder = local_var_req_builder.query(&[("alt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = key {
        local_var_req_builder = local_var_req_builder.query(&[("key", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = oauth_token {
        local_var_req_builder = local_var_req_builder.query(&[("oauth_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pretty_print {
        local_var_req_builder = local_var_req_builder.query(&[("prettyPrint", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quota_user {
        local_var_req_builder = local_var_req_builder.query(&[("quotaUser", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_ip {
        local_var_req_builder = local_var_req_builder.query(&[("userIp", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = drive_id {
        local_var_req_builder = local_var_req_builder.query(&[("driveId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = supports_all_drives {
        local_var_req_builder = local_var_req_builder.query(&[("supportsAllDrives", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = supports_team_drives {
        local_var_req_builder = local_var_req_builder.query(&[("supportsTeamDrives", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = team_drive_id {
        local_var_req_builder = local_var_req_builder.query(&[("teamDriveId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DriveChangesGetStartPageTokenError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists the changes for a user or shared drive.
pub async fn drive_changes_list(configuration: &configuration::Configuration, page_token: &str, alt: Option<&str>, fields: Option<&str>, key: Option<&str>, oauth_token: Option<&str>, pretty_print: Option<bool>, quota_user: Option<&str>, user_ip: Option<&str>, drive_id: Option<&str>, include_corpus_removals: Option<bool>, include_items_from_all_drives: Option<bool>, include_permissions_for_view: Option<&str>, include_removed: Option<bool>, include_team_drive_items: Option<bool>, page_size: Option<i32>, restrict_to_my_drive: Option<bool>, spaces: Option<&str>, supports_all_drives: Option<bool>, supports_team_drives: Option<bool>, team_drive_id: Option<&str>) -> Result<crate::models::ChangeList, Error<DriveChangesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/changes", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = alt {
        local_var_req_builder = local_var_req_builder.query(&[("alt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = key {
        local_var_req_builder = local_var_req_builder.query(&[("key", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = oauth_token {
        local_var_req_builder = local_var_req_builder.query(&[("oauth_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pretty_print {
        local_var_req_builder = local_var_req_builder.query(&[("prettyPrint", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quota_user {
        local_var_req_builder = local_var_req_builder.query(&[("quotaUser", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_ip {
        local_var_req_builder = local_var_req_builder.query(&[("userIp", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("pageToken", &page_token.to_string())]);
    if let Some(ref local_var_str) = drive_id {
        local_var_req_builder = local_var_req_builder.query(&[("driveId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_corpus_removals {
        local_var_req_builder = local_var_req_builder.query(&[("includeCorpusRemovals", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_items_from_all_drives {
        local_var_req_builder = local_var_req_builder.query(&[("includeItemsFromAllDrives", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_permissions_for_view {
        local_var_req_builder = local_var_req_builder.query(&[("includePermissionsForView", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_removed {
        local_var_req_builder = local_var_req_builder.query(&[("includeRemoved", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_team_drive_items {
        local_var_req_builder = local_var_req_builder.query(&[("includeTeamDriveItems", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("pageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = restrict_to_my_drive {
        local_var_req_builder = local_var_req_builder.query(&[("restrictToMyDrive", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = spaces {
        local_var_req_builder = local_var_req_builder.query(&[("spaces", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = supports_all_drives {
        local_var_req_builder = local_var_req_builder.query(&[("supportsAllDrives", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = supports_team_drives {
        local_var_req_builder = local_var_req_builder.query(&[("supportsTeamDrives", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = team_drive_id {
        local_var_req_builder = local_var_req_builder.query(&[("teamDriveId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DriveChangesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Subscribes to changes for a user.
pub async fn drive_changes_watch(configuration: &configuration::Configuration, page_token: &str, alt: Option<&str>, fields: Option<&str>, key: Option<&str>, oauth_token: Option<&str>, pretty_print: Option<bool>, quota_user: Option<&str>, user_ip: Option<&str>, drive_id: Option<&str>, include_corpus_removals: Option<bool>, include_items_from_all_drives: Option<bool>, include_permissions_for_view: Option<&str>, include_removed: Option<bool>, include_team_drive_items: Option<bool>, page_size: Option<i32>, restrict_to_my_drive: Option<bool>, spaces: Option<&str>, supports_all_drives: Option<bool>, supports_team_drives: Option<bool>, team_drive_id: Option<&str>, channel: Option<crate::models::Channel>) -> Result<crate::models::Channel, Error<DriveChangesWatchError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/changes/watch", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = alt {
        local_var_req_builder = local_var_req_builder.query(&[("alt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = key {
        local_var_req_builder = local_var_req_builder.query(&[("key", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = oauth_token {
        local_var_req_builder = local_var_req_builder.query(&[("oauth_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pretty_print {
        local_var_req_builder = local_var_req_builder.query(&[("prettyPrint", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quota_user {
        local_var_req_builder = local_var_req_builder.query(&[("quotaUser", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_ip {
        local_var_req_builder = local_var_req_builder.query(&[("userIp", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("pageToken", &page_token.to_string())]);
    if let Some(ref local_var_str) = drive_id {
        local_var_req_builder = local_var_req_builder.query(&[("driveId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_corpus_removals {
        local_var_req_builder = local_var_req_builder.query(&[("includeCorpusRemovals", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_items_from_all_drives {
        local_var_req_builder = local_var_req_builder.query(&[("includeItemsFromAllDrives", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_permissions_for_view {
        local_var_req_builder = local_var_req_builder.query(&[("includePermissionsForView", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_removed {
        local_var_req_builder = local_var_req_builder.query(&[("includeRemoved", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_team_drive_items {
        local_var_req_builder = local_var_req_builder.query(&[("includeTeamDriveItems", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("pageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = restrict_to_my_drive {
        local_var_req_builder = local_var_req_builder.query(&[("restrictToMyDrive", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = spaces {
        local_var_req_builder = local_var_req_builder.query(&[("spaces", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = supports_all_drives {
        local_var_req_builder = local_var_req_builder.query(&[("supportsAllDrives", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = supports_team_drives {
        local_var_req_builder = local_var_req_builder.query(&[("supportsTeamDrives", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = team_drive_id {
        local_var_req_builder = local_var_req_builder.query(&[("teamDriveId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&channel);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DriveChangesWatchError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

